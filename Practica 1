Nombre: Robles Gómez Cristian Eduardo
Grupo: 951

----------------------------------------------------------------------------------------------------------------------------------------

-------1.- Estadística Básica. Cree una clase llamada Estadística que contiene como atributo una lista de números naturales la cual puede contener repetidos. Debe contener los siguientes métodos:
-------a. Frecuencia de Números. Dada la lista, devuelve una lista de tuplas con el número de veces que aparece cada número en la lista. La tupla debe tener el número y la cantidad de veces que aparece.
-------b. Moda. Dada la lista, devuelva la moda de la lista (el valor más repetido). Puedes usar la función anterior como ayuda.
-------c. Histograma. Dada la lista, muestra el histograma de la lista. Puedes reusar los métodos anteriores. 

class Estadistica:
       def __init__(self, numeros):
        self.numeros = numeros
    
    def frecuencia_numeros(self):
        conteo = {}
        for numero in self.numeros:
            if numero in conteo:
                conteo[numero] += 1
            else:
                conteo[numero] = 1

        lista_frecuencias = []
        for numero in sorted(conteo.keys()):
            lista_frecuencias.append((numero, conteo[numero]))
            
        return lista_frecuencias
    
    def moda(self):
        frecuencias = self.frecuencia_numeros()
        
        numero_mas_repetido = frecuencias[0][0] 
        mayor_frecuencia = frecuencias[0][1]    
        for numero, frecuencia in frecuencias:
            if frecuencia > mayor_frecuencia:
                numero_mas_repetido = numero
                mayor_frecuencia = frecuencia
        
        return numero_mas_repetido
    
    def histograma(self):
        frecuencias = self.frecuencia_numeros()
        
        for numero, frecuencia in frecuencias:
            asteriscos = '*' * frecuencia
            print(f"{numero} {asteriscos}")

----------------------------------------------------------------------------------------------------------------------------------------

-------2.- Historial de Cambios en una Hoja de Cálculo. Simula el historial de cambios en una hoja de cálculo, donde los usuarios pueden realizar cambios en las celdas. Usa una lista como pila para almacenar los cambios y permite a los usuarios deshacer múltiples cambios.
-------Implementa funciones para registrar un cambio en la hoja de cálculo (por ejemplo, cambiar el valor de una celda) y deshacer el último cambio.
-------Cada cambio debe incluir la celda modificada y el valor anterior.
-------Simula una serie de cambios y la función de deshacer.


historial_cambios = []
def registrar_cambio(historial, celda, valor_anterior):
    historial.append((celda, valor_anterior))
    print(f"Cambio registrado: Celda {celda} tenía el valor {valor_anterior}")
def deshacer_cambio(historial):
    if historial:
        ultima_modificacion = historial.pop()
        celda, valor_anterior = ultima_modificacion
        print(f"Deshacer cambio: La celda {celda} vuelve al valor {valor_anterior}")
    else:
        print("No hay cambios para deshacer.")

registrar_cambio(historial_cambios, 'A1', 10)
registrar_cambio(historial_cambios, 'B2', 20)
registrar_cambio(historial_cambios, 'C3', 30)

print("\nHistorial de cambios:", historial_cambios)

deshacer_cambio(historial_cambios)
print("Historial de cambios después de deshacer:", historial_cambios)

deshacer_cambio(historial_cambios)
print("Historial de cambios después de otro deshacer:", historial_cambios)

deshacer_cambio(historial_cambios)
deshacer_cambio(historial_cambios) 


----------------------------------------------------------------------------------------------------------------------------------------

-------3.- Navegación en un Almacén. En este ejercicio, el personaje es un robot que debe recoger productos en un almacén. El almacén está representado como una cuadrícula (grid), donde cada celda puede estar vacía (.), contener un obstáculo (#), o contener un producto (P), el inicio siempre es la posición 0,0. El robot comienza en la esquina superior izquierda del almacén y puede moverse hacia la derecha (R), abajo (D), izquierda (L), arriba(U). El objetivo es recoger todos los productos siguiendo una secuencia de movimientos dados y luego retornar al punto de inicio. 
-------NOTA: LOS MOVIMIENTOS IZQUIERDA (L) Y ARRIBA (U) SE ACTIVAN SOLO PARA RETORNAR AL PUNTO DE INICIO.
-------a. Crear el Almacén: Representa el almacén como una lista de listas (una matriz) donde cada sublista es una fila del almacén.
-------b. Registrar Movimientos: Implementa una función que tome la lista de movimientos y verifique si el robot recoge todos los productos y retorna al punto de inicio sin chocar con obstáculos.
-------c. Verificar Obstáculos: Si el robot encuentra un obstáculo durante su camino, el movimiento es inválido.
-------d. Retornar Resultado: La función debe retornar True si los movimientos son válidos, recogen todos los productos y llevan al robot de vuelta al punto de inicio, o False en caso contrario.

def verificar_recogida_productos(almacen, movimientos):
    filas = len(almacen)
    columnas = len(almacen[0]) if filas > 0 else 0
        x, y = 0, 0
    
    productos_a_recoger = set()
    
    for i in range(filas):
        for j in range(columnas):
            if almacen[i][j] == 'P':
                productos_a_recoger.add((i, j))
    
    productos_recogidos = set()
    
    def es_posicion_valida(nx, ny):
        return 0 <= nx < filas and 0 <= ny < columnas and almacen[nx][ny] != '#'
    
    for movimiento in movimientos:
        if movimiento == 'R':
            nx, ny = x, y + 1
        elif movimiento == 'D':
            nx, ny = x + 1, y
        elif movimiento == 'L':
            nx, ny = x, y - 1
        elif movimiento == 'U':
            nx, ny = x - 1, y
        else:
            print(f"Movimiento inválido: {movimiento}")
            return False
        
        if es_posicion_valida(nx, ny):
            x, y = nx, ny
            # Verificar si hay un producto en la posición actual
            if almacen[x][y] == 'P':
                productos_recogidos.add((x, y))
        else:
            print("Movimiento inválido: El robot chocó con un obstáculo o salió del almacén.")
            return False
    
    if productos_recogidos == productos_a_recoger and (x, y) == (0, 0):
        return True
    else:
        return False

almacen = [
    ['.', '.', '#', 'P'],
    ['.', '#', '.', '.'],
    ['P', '.', 'P', '.'],
    ['#', '.', '#', '.']
]

movimientos_correctos = ['D', 'D', 'R', 'R', 'U', 'R', 'U', 'D', 'L', 'D', 'L', 'L', 'U', 'U']
movimientos_incorrectos = ['D', 'D', 'R', 'R', 'U', 'R', 'U', 'U'] 

print(verificar_recogida_productos(almacen, movimientos_correctos))  # True
print(verificar_recogida_productos(almacen, movimientos_incorrectos))  # False
